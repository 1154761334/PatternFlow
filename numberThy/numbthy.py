# -*- coding: utf-8 -*-
"""numbthy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zFKorJ2XnXpkVGIpU5_XedMlU4y8SN7s
"""

import tensorflow as tf
sess = tf.InteractiveSession()
tf.global_variables_initializer()

def gcd(a,b):
    '''gcd(a,b) return the greatest common divisor 
    of tensor constant a and b.'''
    a = tf.math.abs(a)
    b = tf.math.abs(b)
    result = tf.while_loop(
        cond,body,[a,b]
    )
    return result[1]
def cond(a,b):
    return tf.math.greater(a, 0)
def body(a,b):
    b = tf.math.floormod(b,a)
    tep = a
    a = b
    b = tep
    return a, b


################ Internally used functions #########################################

def isprimeF(n,b):
    """
    isprimeF(n,b) - Test whether number n is prime or a Fermat pseudoprime to base b.
    process: (b**(n-1)) % n
    """
    num = tf.math.floormod(tf.math.pow(b, n-1),n)
    return tf.math.equal(num,1)

def isprimeE(n,b):
    return tf.cond(isprimeF(n,b), lambda: tf.math.equal(1,1), lambda: cond_body_1(n,b))

print(isprimeE(2,3).eval())

def cond_body_1(n,b):
    r = tf.math.subtract(n,1)
    r = tf.while_loop(lambda r: tf.math.equal(tf.math.floormod(r,2), 0),lambda r:tf.math.floordiv(r,2),[r])
    c = tf.math.floormod(tf.math.pow(b, n-1),n)
    result = tf.cond(tf.math.equal(c, 1), lambda: tf.math.equal(1,1), lambda: cond_body_2(c,n))
    
    print(result)
    return result

print(cond_body_1(55,5).eval())

def while_cond(c,n):
    def cond_body_2(c,n):
        re = tf.cond(
            tf.math.equal(c,1),
            lambda: tf.math.equal(1,0),
            lambda: cond_body_3(c,n)
            )
        return re
    def cond_body_3(c,n):
        re = tf.cond(
            tf.math.equal(c,n-1),
            lambda: tf.math.equal(1,1),
            lambda: tf.math.floormod(tf.math.pow(c, 2),n)
            )
        return re
print(cond_body_2(1,1).eval())
